{"version":3,"sources":["API.ts","utils.ts","components/QuestionsCard.styles.ts","components/QuestionsCard.tsx","images/syd-sujuaan.jpg","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a189701d.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\r\n\r\nexport enum Difficulty {\r\n  EASY = 'easy',\r\n  MEDIUM = 'medium',\r\n  HARD = 'hard'\r\n}\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n  const endpoint = `http://opentdb.com/api.php?amount=${ amount }&difficulty=${ difficulty }&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  \r\n   return data.results.map((question: Question) =>( {\r\n    ...question,\r\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer]) \r\n  }))\r\n  \r\n}","export const shuffleArray = (array: any[]) => {\r\n  return [...array].sort(() => Math.random() - 0.5);\r\n}","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\nmax-width: 1100px;\r\nbackground: #ebfeff;\r\nborder-radius: 10px;\r\nborder: 2px solid #0085a3;\r\npadding: 20px;\r\nbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\ntext-align: center;\r\n\r\np {\r\n  font-size: 1rem;\r\n\r\n}\r\n`\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked:boolean\r\n}\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\ntransition: all 0.3 ease;\r\n:hover {\r\n  opacity: 0.8;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n  user-select: none;\r\n  font-size: 0.8rem;\r\n  width: 100%auto;\r\n  height: 40px;\r\n  margin: 5px 0;\r\n  background: ${({ correct, userClicked }) =>\r\n  correct ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n    : !correct && userClicked\r\n      ?'linear-gradient(90deg, #ff5656, #c16868)'\r\n      : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n  border: 3px solid white;\r\n  box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n  border-radius: 10px;\r\n  color:white;\r\n  text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25)\r\n}\r\n\r\n`","import React from 'react';\r\nimport { AnswerObject } from '../App'\r\nimport {Wrapper, ButtonWrapper} from './QuestionsCard.styles'\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({question, answers, callback, userAnswer, questionNr, totalQuestions}) => {\r\n  return (<Wrapper>\r\n    <p className='number'>\r\n      Question: {questionNr} / {totalQuestions}\r\n    </p>\r\n    <p dangerouslySetInnerHTML={{ __html: question }} />\r\n    <div>\r\n      {answers.map(answer => (\r\n        <ButtonWrapper\r\n          key={answer}\r\n          correct={userAnswer?.correctAnswer === answer}\r\n          userClicked={userAnswer?.answer === answer}\r\n        >\r\n          <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n            <span dangerouslySetInnerHTML={{__html: answer}}/>\r\n          </button>\r\n          </ButtonWrapper>\r\n          ))}\r\n    </div>\r\n </Wrapper>)\r\n\r\n};\r\n\r\nexport default QuestionCard;","export default __webpack_public_path__ + \"static/media/syd-sujuaan.cc1c0846.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\r\nimport BGImage from './images/syd-sujuaan.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  height: 100%;\r\n}\r\n\r\nbody {\r\n  background-image: url(${BGImage});\r\n  background-size: cover;\r\n  margin: 0;\r\n  padding: 0 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n* {\r\n  box-sizing: border-box;\r\n  font-family: 'Catamaran', sans-serif;\r\n}\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nalign-items: center;\r\n> p {\r\n  color: white;\r\n}\r\n\r\n.score {\r\n  color: white;\r\n  font-size: 2rem;\r\n  margin: 0;\r\n}\r\n\r\nh1 {\r\n  font-family: Fascinate Inline, Haettenschweiler, 'Arial Narrow Bold', sans-serif;\r\n   background-image: linear-gradient(45deg, #f3ec78, #af4261);\r\n  background-size: 100%;\r\n  background-clip: text;\r\n text-fill-color: transparent;\r\n -webkit-background-clip: text;\r\n    -moz-background-clip: text;\r\n    -webkit-text-fill-color: transparent; \r\n    -moz-text-fill-color: transparent;\r\n \r\n  font-size: 70px;\r\n  text-align: center;\r\n  font-weight: 400;\r\n  margin: 20px;\r\n}\r\n\r\n.start, .next {\r\n  cursor: pointer;\r\n  background: linear-gradient(180deg, white, #ffcc91);\r\n  border: 2px solid #d38558;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  border-radius: 10px;\r\n  height: 40px;\r\n  margin: 20px 0;\r\n  padding: 0 40px;\r\n}\r\n\r\n.start {\r\n  max-width: 200px;\r\n}\r\n`","import React, { useState } from 'react';\nimport { fetchQuizQuestions, Difficulty, QuestionState } from './API';\n//Components \nimport QuestionCard from './components/QuestionsCard';\n//styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst App = () => {\n  \n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const TOTAL_QUESTIONS = 10;\n\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\nif(!gameOver) {\n  //users answer\n  const answer = e.currentTarget.value;\n //check answer against the correct answer\n  const correct = questions[number].correct_answer === answer;\n  //add score if answer is correct\n  if (correct) setScore(prev => prev + 1);\n  //save answer in the array for user answers\n  const answerObject = {\n    question: questions[number].question,\n    answer,\n    correct,\n    correctAnswer: questions[number].correct_answer,\n  }\n\n  setUserAnswers(prev => [...prev, answerObject])\n\n}\n  }\n\n\n  const nextQuestion = () => {\n//move on to the next question if not the last question\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n\n    } else {\n      setNumber(nextQuestion);\n    }\n  }\n  return (\n    <>\n    <GlobalStyle />\n    <Wrapper>\n      <h1> React Quiz</h1>\n      {gameOver || userAnswers.length ===TOTAL_QUESTIONS ?(<button className='start' onClick={startTrivia}>Start</button>) : null}\n      \n      {!gameOver ? <p className='score'>Score: { score}</p>: null }\n      {loading &&  <p>Loading Questions...</p>}\n      {!loading && !gameOver && (\n        \n      <QuestionCard\n        questionNr={number + 1}\n        totalQuestions={TOTAL_QUESTIONS}\n        question={questions[number].question}\n        answers={questions[number].answers}\n        userAnswer={userAnswers ? userAnswers[number] : undefined}\n        callback={checkAnswer}\n      />\n      )}\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? <button className='next' onClick={nextQuestion}>Next Question</button>: null}\n      </Wrapper>\n    </> \n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}